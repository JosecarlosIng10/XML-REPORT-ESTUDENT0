
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\006\000\002" +
    "\007\004\000\002\007\003\000\002\010\007\000\002\010" +
    "\007\000\002\011\005\000\002\012\004\000\002\012\003" +
    "\000\002\013\007\000\002\014\007\000\002\015\010\000" +
    "\002\015\005\000\002\016\007\000\002\016\005\000\002" +
    "\017\005\000\002\020\004\000\002\020\003\000\002\021" +
    "\010\000\002\022\005\000\002\023\004\000\002\023\003" +
    "\000\002\024\005\000\002\025\006\000\002\026\006\000" +
    "\002\027\006\000\002\030\007\000\002\030\007\000\002" +
    "\030\005\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\016\003\015\010\016\017\022\023\005\024" +
    "\006\027\020\001\002\000\016\002\ufffb\010\ufffb\017\ufffb" +
    "\023\ufffb\024\ufffb\027\ufffb\001\002\000\004\006\136\001" +
    "\002\000\004\027\110\001\002\000\016\002\ufff9\010\ufff9" +
    "\017\ufff9\023\ufff9\024\ufff9\027\ufff9\001\002\000\004\002" +
    "\107\001\002\000\004\002\000\001\002\000\016\002\ufffd" +
    "\010\ufffd\017\ufffd\023\ufffd\024\ufffd\027\ufffd\001\002\000" +
    "\016\002\ufffa\010\ufffa\017\ufffa\023\ufffa\024\ufffa\027\ufffa" +
    "\001\002\000\016\002\ufff8\010\ufff8\017\ufff8\023\ufff8\024" +
    "\ufff8\027\ufff8\001\002\000\014\010\016\017\022\023\005" +
    "\024\006\027\020\001\002\000\004\027\052\001\002\000" +
    "\016\002\ufff7\010\ufff7\017\ufff7\023\ufff7\024\ufff7\027\ufff7" +
    "\001\002\000\004\004\036\001\002\000\016\002\uffff\010" +
    "\016\017\022\023\005\024\006\027\020\001\002\000\004" +
    "\027\024\001\002\000\006\020\034\027\024\001\002\000" +
    "\004\006\026\001\002\000\006\020\uffe6\027\uffe6\001\002" +
    "\000\004\021\027\001\002\000\004\032\030\001\002\000" +
    "\004\022\031\001\002\000\004\030\032\001\002\000\006" +
    "\020\uffe5\027\uffe5\001\002\000\006\020\uffe7\027\uffe7\001" +
    "\002\000\016\002\uffe8\010\uffe8\017\uffe8\023\uffe8\024\uffe8" +
    "\027\uffe8\001\002\000\016\002\ufffe\010\ufffe\017\ufffe\023" +
    "\ufffe\024\ufffe\027\ufffe\001\002\000\004\006\041\001\002" +
    "\000\006\006\ufff4\030\ufff4\001\002\000\006\006\041\030" +
    "\047\001\002\000\004\031\042\001\002\000\004\006\043" +
    "\001\002\000\004\032\044\001\002\000\006\005\046\007" +
    "\045\001\002\000\006\006\ufff3\030\ufff3\001\002\000\006" +
    "\006\ufff2\030\ufff2\001\002\000\016\002\ufff6\010\ufff6\017" +
    "\ufff6\023\ufff6\024\ufff6\027\ufff6\001\002\000\006\006\ufff5" +
    "\030\ufff5\001\002\000\006\015\uffef\027\uffef\001\002\000" +
    "\004\011\056\001\002\000\006\015\054\027\052\001\002" +
    "\000\016\002\ufff1\010\ufff1\017\ufff1\023\ufff1\024\ufff1\027" +
    "\ufff1\001\002\000\006\015\ufff0\027\ufff0\001\002\000\004" +
    "\012\060\001\002\000\004\006\076\001\002\000\004\032" +
    "\061\001\002\000\004\005\062\001\002\000\004\035\063" +
    "\001\002\000\004\013\064\001\002\000\004\032\073\001" +
    "\002\000\006\006\uffed\035\066\001\002\000\004\014\067" +
    "\001\002\000\004\032\070\001\002\000\004\007\071\001" +
    "\002\000\004\035\072\001\002\000\006\006\uffec\035\uffec" +
    "\001\002\000\004\007\074\001\002\000\006\006\uffeb\035" +
    "\uffeb\001\002\000\006\030\101\035\102\001\002\000\004" +
    "\032\077\001\002\000\004\005\100\001\002\000\006\030" +
    "\uffe9\035\uffe9\001\002\000\006\015\uffee\027\uffee\001\002" +
    "\000\004\006\103\001\002\000\004\032\104\001\002\000" +
    "\004\005\105\001\002\000\006\030\uffea\035\uffea\001\002" +
    "\000\016\002\ufffc\010\ufffc\017\ufffc\023\ufffc\024\ufffc\027" +
    "\ufffc\001\002\000\004\002\001\001\002\000\004\004\131" +
    "\001\002\000\004\027\112\001\002\000\004\016\115\001" +
    "\002\000\004\025\114\001\002\000\016\002\uffe0\010\uffe0" +
    "\017\uffe0\023\uffe0\024\uffe0\027\uffe0\001\002\000\004\006" +
    "\117\001\002\000\006\030\123\035\124\001\002\000\004" +
    "\032\120\001\002\000\006\006\122\007\121\001\002\000" +
    "\006\030\uffdb\035\uffdb\001\002\000\006\030\uffda\035\uffda" +
    "\001\002\000\004\025\uffde\001\002\000\004\006\125\001" +
    "\002\000\004\032\126\001\002\000\006\006\130\007\127" +
    "\001\002\000\006\030\uffdd\035\uffdd\001\002\000\006\030" +
    "\uffdc\035\uffdc\001\002\000\004\006\117\001\002\000\006" +
    "\030\133\035\124\001\002\000\004\027\uffdf\001\002\000" +
    "\006\006\136\026\141\001\002\000\006\006\uffe2\026\uffe2" +
    "\001\002\000\004\032\137\001\002\000\004\006\140\001" +
    "\002\000\006\006\uffe1\026\uffe1\001\002\000\016\002\uffe4" +
    "\010\uffe4\017\uffe4\023\uffe4\024\uffe4\027\uffe4\001\002\000" +
    "\006\006\uffe3\026\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\024\002\007\003\010\004\020\005\011\006" +
    "\003\011\012\017\006\022\013\025\016\001\001\000\002" +
    "\001\001\000\006\023\133\024\134\001\001\000\004\026" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\105\006\003\011\012\017\006\022\013" +
    "\025\016\001\001\000\006\012\052\013\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\034\006\003" +
    "\011\012\017\006\022\013\025\016\001\001\000\006\020" +
    "\022\021\024\001\001\000\004\021\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\037\010\036\001\001\000\002\001\001\000\004" +
    "\010\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\056\001\001\000" +
    "\004\016\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
     public String ESintacticos="";
     public String cadenajava="";
     ListaEstudiantes listaestudiante = new ListaEstudiantes();
     ListaPonderacion listaponderacion = new ListaPonderacion();
    
     public int car=0;
     public String nom="";
     public String ape="";
     public String act="";

     public int a=0;
     public int b=0;
     public int c=0;
     public int d=0;



    public void syntax_error(Symbol s){
        ESintacticos+="Error sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+"\n";
        System.out.println("Error sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1)+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        ESintacticos+= "";
       

    }

    public int geta()
    {
        return a;
    }
    public int getb()
    {
        return b;
    }
    public int getc()
    {
        return c;
    }
     public int getd()
    {
        return d;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    
   

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= S 
            {
              String RESULT =null;
		
listaestudiante.setlistaponderacion(listaponderacion);
listaestudiante.calcularnotas();
listaestudiante.imprimirestudiantes(); 
listaponderacion.imprimirponderacion();
listaestudiante.reporteaprobados();
listaestudiante.reportereprobados();
listaestudiante.reportemejores();


              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LSENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LSENT ::= LSENT SENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LSENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LSENT ::= SENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LSENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LSENT ::= error SENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LSENT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENT ::= ENCABEZADO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENT ::= CUERPO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENT ::= PONDERACIONS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENT ::= REPORTES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENT ::= ESTILOS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ENCABEZADO ::= abre encabezados LPOSICION cierra 
            {
              String RESULT =null;
		int lposleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lposright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lpos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

    String posi[]= lpos.split("#");
    String i1="", i2="", i3="", d1="", d2="", d3="";
    
    for (int i=0; i<posi.length;i++)
{
    String ver[] = posi[i].split("=");
    if (ver[0].equals("superior-izq"))
    {
        i1=ver[1];
    }
    else if (ver[0].equals("centro-izq"))
    {
        i2=ver[1];
    }
    else if (ver[0].equals("inferior-izq"))
    {
        i3=ver[1];
    }
    else if (ver[0].equals("superior-der"))
    {
        d1=ver[1];
    }   
    else if (ver[0].equals("centro-der"))
    {
        d2=ver[1];
    }
    else if (ver[0].equals("inferior-der"))
    {
        d3=ver[1];
    }

}

listaestudiante.encabezado(i1,i2,i3,d1,d2,d3);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LPOSICION ::= LPOSICION POSICION 
            {
              String RESULT =null;
		int pos1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pos1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pos1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pos2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pos2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= pos1 + "#"+pos2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPOSICION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LPOSICION ::= POSICION 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= pos;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LPOSICION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // POSICION ::= id dospuntos id igual cadena 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT= pos +"="+id1+": "+id2;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // POSICION ::= id dospuntos id igual num 
            {
              String RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT= pos +"="+ id1 +": " + id2;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("POSICION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= cuerpos LEST fincuerpos 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LEST ::= LEST EST 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LEST ::= EST 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EST ::= abre estudiante DATOS LACTIVIDADES cierra 
            {
              String RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    act= ac;

Estudiante nuevo = new Estudiante();
nuevo.carnet = car;
nuevo.nombre=nom;
nuevo.apellidos=ape;
nuevo.notas = act;

listaestudiante.GuardarEstudiante(nuevo);



              CUP$parser$result = parser.getSymbolFactory().newSymbol("EST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATOS ::= carnet igual num coma DAT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		car=Integer.parseInt(n) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DAT ::= DAT coma apellidos igual cadena coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		ape=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DAT ::= nombres igual cadena 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		nom=n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DAT",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LACTIVIDADES ::= LACTIVIDADES coma id igual num 
            {
              String RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ac = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= ac + "," + id + "=" + n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LACTIVIDADES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LACTIVIDADES ::= id igual num 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id +"="+n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LACTIVIDADES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PONDERACIONS ::= ponderacion LIDENTIFICADOR finponderacion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PONDERACIONS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LIDENTIFICADOR ::= LIDENTIFICADOR IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIDENTIFICADOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LIDENTIFICADOR ::= IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIDENTIFICADOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADOR ::= abre id valor igual porcentaje cierra 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Ponderacion nuevo = new Ponderacion();
        nuevo.actividad = id;
        String num = val.replace("%","");
        nuevo.valor=  Integer.parseInt(num);
        
        listaponderacion.GuardarPonderacion(nuevo);

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REPORTES ::= reporte LTIPO finreportes 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPORTES",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LTIPO ::= LTIPO TIPO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTIPO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LTIPO ::= TIPO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LTIPO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= id igual id 
            {
              String RESULT =null;
		int reporteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reporteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String reporte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if ((reporte.equals("ra")) && (val.equals("true"))){a=1;}
    else if ((reporte.equals("rr")) && (val.equals("true"))){b=1;}
    else if ((reporte.equals("rp")) && (val.equals("true"))){c=1;}
    else if ((reporte.equals("re")) && (val.equals("true"))){d=1;}



              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTILOS ::= estilo ENCABEZADOESTILOS CUERPOESTILOS finestilo 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTILOS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENCABEZADOESTILOS ::= abre encabezados LATRIBUTOS cierra 
            {
              String RESULT =null;
		int latrileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int latriright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String latri = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String list[] = latri.split(",");
    
for (int i=0;i<list.length;i++)
    {
        String dat[] = list[i].split("=");
        if (dat[0].equals("color-t"))
        {
             String d = dat[1].replace("\"", "");
            listaestudiante.setColort(d);
        }
        else if (dat[0].equals("color-v"))
        {
           String d = dat[1].replace("\"", "");
            listaestudiante.setColorv(d);
        }
    }



              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCABEZADOESTILOS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPOESTILOS ::= abre cuerpostyle LATRIBUTOS cierra 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOESTILOS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LATRIBUTOS ::= LATRIBUTOS coma id igual cadena 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= l1+","+id1+"="+id2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LATRIBUTOS ::= LATRIBUTOS coma id igual id 
            {
              String RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= l1+","+id1+"="+id2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LATRIBUTOS ::= id igual cadena 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= id1+"="+id2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LATRIBUTOS ::= id igual id 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= id1+"="+id2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LATRIBUTOS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
